name: CI Pipeline # Name of the workflow; appears in the GitHub Actions UI.

on: # Defines the events that trigger this workflow.
  pull_request: # Trigger the workflow when a pull request targets the main branch.
    branches:
      - main
  push: # Trigger the workflow when code is pushed to the main branch.
    branches:
      - main

jobs: # Defines a set of tasks (jobs) to be executed.
  build: # Name of the job.
    runs-on: ubuntu-latest # Specify the virtual machine to run the job.

    steps: # Sequence of tasks within the build job.
      - name: Check out the repository # Step to clone the repository code into the runner.
        uses: actions/checkout@v2 # GitHub-provided action to fetch code.

      - name: Cache Node.js modules # Use a cache to save and restore dependencies.
        uses: actions/cache@v3 # GitHub action for caching.
        with:
          path: node_modules # Cache the node_modules folder.
          key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }} # Cache key based on OS and yarn.lock hash.
          restore-keys: |
            ${{ runner.os }}-node- # Fallback keys if an exact match isn't found.

      - name: Set up Node.js # Install Node.js in the runner.
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*' # Install the latest LTS (Long-Term Support) version of Node.js.

      - name: Verify Node.js version # Confirm the installed Node.js version.
        run: node -v

      - name: Install dependencies # Install project dependencies using Yarn.
        run: yarn install

      - name: Compile TypeScript # Compile the TypeScript files to JavaScript.
        run: yarn compile

      - name: Run Lint # Analyze code for potential issues and enforce code style.
        run: yarn lint

      - name: Run Security Audit # Check for security vulnerabilities in dependencies.
        run: yarn audit

      # - name: Run Tests # Run the project test suite. (Currently commented out)
      #   run: yarn test

      # - name: Generate Coverage Report # Generate test coverage report. (Currently commented out)
      #   run: yarn test --coverage

      - name: Build Project # Build the final application or project.
        run: yarn build
